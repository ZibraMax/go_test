package gravity

import (
	"fmt"
	"image/color"
	"math"
	"sync"
	"time"

	"github.com/go-p5/p5"
)

var wg = sync.WaitGroup{}

const (
	ERROR = iota
	EULER
	HEUN
)
const FPS float64 = 120

var (
	width  = 800
	height = 800
	xmax   = 10.0
	xmin   = -10.0
	ymax   = -10.0
	ymin   = 10.0
)
var t float64 = 0.0

type Trigger struct {
	x1     [2]float64
	x2     [2]float64
	color  color.RGBA
	ID     int
	normal [2]float64
	length float64
	dx     float64
	dy     float64
	width  float64
}

func newTrigger(x1 [2]float64, x2 [2]float64) *Trigger {
	color := color.RGBA{R: 0, G: 255, B: 0, A: 255}
	dx := x2[0] - x1[0]
	dy := x2[1] - x1[1]
	leng := math.Sqrt(dx*dx + dy*dy)
	normal := [2]float64{-dy / leng, dx / leng}
	return &Trigger{x1: x1, x2: x2, color: color, ID: len(triggers), normal: normal, length: leng, dx: dx, dy: dy, width: 5}
}

func (trigger *Trigger) display() {
	draw_line(trigger.x1[0], trigger.x1[1], trigger.x2[0], trigger.x2[1], trigger.color, trigger.width)
}

func (trigger *Trigger) update() {
	trigger.display()
}

type Wall struct {
	x1     [2]float64
	x2     [2]float64
	color  color.RGBA
	ID     int
	normal [2]float64
	length float64
	dx     float64
	dy     float64
	width  float64
}

func newWall(x1 [2]float64, x2 [2]float64) *Wall {
	color := color.RGBA{R: 0, G: 0, B: 255, A: 255}
	dx := x2[0] - x1[0]
	dy := x2[1] - x1[1]
	leng := math.Sqrt(dx*dx + dy*dy)
	normal := [2]float64{-dy / leng, dx / leng}
	return &Wall{x1: x1, x2: x2, color: color, ID: len(walls), normal: normal, length: leng, dx: dx, dy: dy, width: 10}
}

func (wall *Wall) display() {
	draw_line(wall.x1[0], wall.x1[1], wall.x2[0], wall.x2[1], wall.color, wall.width)
	// draw_line(wall.x1[0]+wall.dx/2, wall.x1[1]+wall.dy/2, wall.x1[0]+wall.dx/2+wall.normal[0], wall.x1[1]+wall.dy/2+wall.normal[1], wall.color, 0.5)
}

func (wall *Wall) update() {
	wall.display()
}

type Object2D struct {
	x          [2]float64
	v          [2]float64
	a          [2]float64
	mass       float64
	ID         int
	forces     [](func(*Object2D, []*Object2D, float64) [2]float64)
	integrator int
	color      color.RGBA
	r          float64
	v0         [2]float64
}

func newObject(x [2]float64, v [2]float64, a [2]float64, mass float64, integrator int) *Object2D {
	forces := [](func(*Object2D, []*Object2D, float64) [2]float64){}
	color := color.RGBA{R: 255, G: 255, B: 255, A: 255}
	return &Object2D{x: x, v: v, a: a, ID: len(objects), forces: forces, mass: mass, integrator: integrator, color: color, r: mass / 10, v0: v}
}

func (object *Object2D) addForce(force func(*Object2D, []*Object2D, float64) [2]float64) {
	object.forces = append(object.forces, force)
}

func (object Object2D) print_details() {
	fmt.Printf("ID: %d X = [%.3f,%.3f], V = [%.3f,%.3f], A = [%.3f,%.3f]. dt=%.3f\n", object.ID, object.x[0], object.x[1], object.v[0], object.v[1], object.a[0], object.a[1], dt)
}

func (object *Object2D) move() {
	sumfx := 0.0
	sumfy := 0.0
	sumfxt1 := 0.0
	sumfyt1 := 0.0
	for _, force := range object.forces {
		result_forces := force(object, objects, t)
		sumfx += result_forces[0]
		sumfy += result_forces[1]
	}
	if object.integrator == EULER {
		object.a[0] = sumfx / object.mass
		object.a[1] = sumfy / object.mass
		object.v[0] = object.v[0] + object.a[0]*dt
		object.v[1] = object.v[1] + object.a[1]*dt
		object.x[0] = object.x[0] + object.v[0]*dt
		object.x[1] = object.x[1] + object.v[1]*dt
	} else {
		euler_object := newObject(object.x, object.v, object.a, object.mass, object.integrator)
		euler_object.a[0] = sumfx / euler_object.mass
		euler_object.a[1] = sumfy / euler_object.mass
		euler_object.v[0] = euler_object.v[0] + euler_object.a[0]*dt
		euler_object.v[1] = euler_object.v[1] + euler_object.a[1]*dt
		euler_object.x[0] = euler_object.x[0] + euler_object.v[0]*dt
		euler_object.x[1] = euler_object.x[1] + euler_object.v[1]*dt

		for _, force := range object.forces {
			result_forces := force(euler_object, objects, t+dt)
			sumfxt1 += result_forces[0]
			sumfyt1 += result_forces[1]
		}

		object.a[0] = (sumfx + sumfxt1) / 2 / object.mass
		object.a[1] = (sumfy + sumfyt1) / 2 / object.mass

		k1vx := euler_object.a[0]
		k1vy := euler_object.a[1]
		k1xx := euler_object.v[0]
		k1xy := euler_object.v[1]

		k2vx := sumfxt1 / object.mass
		k2vy := sumfyt1 / object.mass
		k2xx := object.v[0] + (k1vx)*dt
		k2xy := object.v[1] + (k1vy)*dt
		object.v[0] = object.v[0] + (k1vx+k2vx)/2*dt
		object.v[1] = object.v[1] + (k1vy+k2vy)/2*dt

		object.x[0] = object.x[0] + (k1xx+k2xx)/2*dt
		object.x[1] = object.x[1] + (k1xy+k2xy)/2*dt
	}

}

func (object *Object2D) collide(walls []*Wall) {
	for _, wall := range walls {
		d, dx := point_to_line_distance(object.x[0], object.x[1], wall.x1[0], wall.x1[1], wall.x2[0], wall.x2[1])
		if d <= object.r {
			fact := 2 * (object.v[0]*dx[0]/d + object.v[1]*dx[1]/d)
			r := [2]float64{object.v[0] - fact*dx[0]/d, object.v[1] - fact*dx[1]/d}
			object.v = r
		}

	}
}

func (object *Object2D) collide_triggers(walls []*Trigger) {
	for _, wall := range walls {
		d, _ := point_to_line_distance(object.x[0], object.x[1], wall.x1[0], wall.x1[1], wall.x2[0], wall.x2[1])
		if d <= object.r {
			object.color = color.RGBA{R: 0, G: 255, B: 0, A: 255}
			object.v = [2]float64{0.0, 0.0}
			object.a = [2]float64{0.0, 0.0}
			object.forces = [](func(*Object2D, []*Object2D, float64) [2]float64){}
			yes = append(yes, object.v0)
		}

	}
}

func (object *Object2D) display() {
	p5.StrokeWidth(0)
	p5.Fill(object.color)
	draw_ellipse(object.x[0], object.x[1], object.mass/10)
	// for _, wall := range walls {
	// d, dx := point_to_line_distance(object.x[0], object.x[1], wall.x1[0], wall.x1[1], wall.x2[0], wall.x2[1])
	// draw_line(object.x[0], object.x[1], object.x[0]+dx[0], object.x[1]+dx[1], wall.color, 0.5)
	// draw_text(object.x[0]+dx[0]*0.5, object.x[1]+dx[1]*0.5, 10, "d="+fmt.Sprintf("%.3f", d))
	// }
}
func (object *Object2D) update() {
	object.collide(walls)
	object.collide_triggers(triggers)
	object.move()
	object.display()
	// object.print_details()
	// wg.Done()
}

func draw_ellipse(x float64, y float64, r float64) {
	p5.Ellipse(x, y, 2*r, 2*r)
}

func draw_text(x float64, y float64, size float64, text string) {
	p5.TextSize(size)
	p5.Text(text, x, y)
}

func draw_line(x1 float64, y1 float64, x2 float64, y2 float64, color color.RGBA, width float64) {
	p5.Fill(color)
	p5.StrokeWidth(width)
	p5.Line(x1, y1, x2, y2)
}

func point_to_line_distance(x float64, y float64, x1 float64, y1 float64, x2 float64, y2 float64) (float64, []float64) {

	A := x - x1
	B := y - y1
	C := x2 - x1
	D := y2 - y1

	dot := A*C + B*D
	len_sq := C*C + D*D
	param := -1.0
	if len_sq != 0 {
		param = dot / len_sq
	}
	var xx, yy float64

	if param < 0 {
		xx = x1
		yy = y1
	} else if param > 1 {
		xx = x2
		yy = y2
	} else {
		xx = x1 + param*C
		yy = y1 + param*D
	}

	dx := x - xx
	dy := y - yy
	return math.Sqrt(dx*dx + dy*dy), []float64{-dx, -dy}
}

var dt float64 = 0.0
var objects []*Object2D
var walls []*Wall
var triggers []*Trigger

func frameUpdate() {
	frame_start_time := time.Now()
	update()
	frame_end_time := time.Now()
	dt = float64(frame_end_time.UnixNano())/1000000000.0 - float64(frame_start_time.UnixNano())/1000000000.0
	total_frame_time := 1.0 / FPS * 1000
	remaining_time := total_frame_time - dt/1000.0
	remaining_time = math.Max(0.0, remaining_time)
	time.Sleep(time.Millisecond * time.Duration(int(remaining_time)))
	dt += remaining_time / 1000
	t += dt
}

func update() {
	draw_text(0.5, 0.5, 15, "t="+fmt.Sprintf("%.3f", t))
	for _, wall := range walls {
		// wg.Add(1)
		wall.update()
	}

	for _, trigger := range triggers {
		// wg.Add(1)
		trigger.update()
	}
	for _, object := range objects {
		// wg.Add(1)
		object.update()
	}
	// for _, v := range yes {
	// 	fmt.Printf("%.3f,%.3f\n",v[0],v[1])
	// }
	// println("----------------")
	// wg.Wait()
}

func square_Wall(x0 float64, y0 float64, x1 float64, y1 float64) {
	wall := newWall([2]float64{x0, y0}, [2]float64{x1, y0})
	wall.width = 2
	walls = append(walls, wall)

	wall = newWall([2]float64{x1, y0}, [2]float64{x1, y1})
	wall.width = 2
	walls = append(walls, wall)

	wall = newWall([2]float64{x1, y1}, [2]float64{x0, y1})
	wall.width = 2
	walls = append(walls, wall)

	wall = newWall([2]float64{x0, y1}, [2]float64{x0, y0})
	wall.width = 2
	walls = append(walls, wall)
}

var yes []([2]float64)
var G float64 = 10

func setup() {
	// square_Wall(xmin, ymin, xmax, ymax)

	sun := newObject([2]float64{0.0, 0.0}, [2]float64{0.0, 0.0}, [2]float64{0.0, 0.0}, 10, EULER)
	sun.color = color.RGBA{R: 255, G: 255, B: 0, A: 255}
	objects = append(objects, sun)

	earth := newObject([2]float64{5, 0}, [2]float64{0.0, 5.5}, [2]float64{0.0, 0.0}, 5.0, EULER)
	earth.color = color.RGBA{R: 0, G: 0, B: 255, A: 255}
	objects = append(objects, earth)

	earth = newObject([2]float64{9, 0}, [2]float64{0.0, 10.5}, [2]float64{0.0, 0.0}, 5.0, EULER)
	earth.color = color.RGBA{R: 0, G: 0, B: 255, A: 255}
	objects = append(objects, earth)

	for id, v := range objects {
		if id > 0 {
			v.addForce(func(object *Object2D, objects2 []*Object2D, t float64) [2]float64 {
				dx := sun.x[0] - object.x[0]
				dy := sun.x[1] - object.x[1]
				d := math.Sqrt(dx*dx + dy*dy)
				rx := dx / d
				ry := dy / d
				F := [2]float64{rx * G * sun.mass * object.mass / d, ry * G * sun.mass * object.mass / d}
				for i, sun := range objects2 {
					if i > 0 && i != object.ID {
						dx := sun.x[0] - object.x[0]
						dy := sun.x[1] - object.x[1]
						d := math.Sqrt(dx*dx + dy*dy)
						rx := dx / d
						ry := dy / d
						F[0] += rx * G * sun.mass * object.mass / d
						F[1] += ry * G * sun.mass * object.mass / d
					}
				}
				return F
			})
		}

	}

	p5.Canvas(width, height)
	p5.PhysCanvas(width, height, xmin, xmax, ymin, ymax)
	p5.Background(color.White)
}
func main() {
	println("Iniciando aplicaci√≥n --- " + time.Now().String())
	p5.Run(setup, frameUpdate)
}
